GetUsers:
  handler: src/lambda/http/v1/users/getUsers.handler
  events:
    - http:
        method: get
        path: /v1/users
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId: { Ref: MyApiGatewayAuthorizer }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:ListUsers
      Resource:
        - {"Fn::Join": ["", ["arn:aws:cognito-idp:", {Ref: "AWS::Region"}, ":*:userpool/", Ref: CognitoUserPool]]}

GetUser:
  handler: src/lambda/http/v1/users/getUser.handler
  events:
    - http:
        method: get
        path: /v1/users/{userId}
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId: { Ref: MyApiGatewayAuthorizer }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminGetUser
      Resource:
        - {"Fn::Join": ["", ["arn:aws:cognito-idp:", {Ref: "AWS::Region"}, ":*:userpool/", Ref: CognitoUserPool]]}

CreateUser:
  handler: src/lambda/http/v1/users/createUser.handler
  events:
    - http:
        method: post
        path: /v1/users
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId: { Ref: MyApiGatewayAuthorizer }
        request:
          schema:
            application/json: ${file(src/lambda/http/v1/validation/create-user-schema.json)}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource:
        - {"Fn::Join": ["", ["arn:aws:cognito-idp:", {Ref: "AWS::Region"}, ":*:userpool/", Ref: CognitoUserPool]]}

EditUser:
  handler: src/lambda/http/v1/users/editUser.handler
  events:
    - http:
        method: patch
        path: /v1/users
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId: { Ref: MyApiGatewayAuthorizer }
        request:
          schema:
            application/json: ${file(src/lambda/http/v1/validation/edit-user-schema.json)}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminUpdateUserAttributes
      Resource:
        - {"Fn::Join": ["", ["arn:aws:cognito-idp:", {Ref: "AWS::Region"}, ":*:userpool/", Ref: CognitoUserPool]]}

DeleteUser:
  handler: src/lambda/http/v1/users/deleteUser.handler
  events:
    - http:
        method: delete
        path: /v1/users/{userId}
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId: { Ref: MyApiGatewayAuthorizer }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminDisableUser
      Resource:
        - {"Fn::Join": ["", ["arn:aws:cognito-idp:", {Ref: "AWS::Region"}, ":*:userpool/", Ref: CognitoUserPool]]}

GenerateUploadUrl:
  handler: src/lambda/http/v1/users/generateUploadUrl.handler
  events:
    - http:
        method: post
        path: /v1/users/attachment/{userId}
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId: { Ref: MyApiGatewayAuthorizer }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
