service:
  name: grifor-serverless-app
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    WORK_CALENDAR_TABLE: WorkCalendarTable-${self:provider.stage}

functions:
  GetWorkCalendar:
    handler: src/http/lambda/calendar/getWorkCalendar.handler
    events:
      - http:
          method: get
          path: /calendar/{year}/{month}
          cors: true

  CreateWorkCalendar:
    handler: src/http/lambda/calendar/createWorkCalendarhandler
    events:
      - http:
          method: patch
          path: /calendar/{year}/{month}
          cors: true

  UpdateWorkCalendar:
    handler: src/http/lambda/calendar/updateWorkCalendar.handler
    events:
      - http:
          method: patch
          path: /calendar/{year}/{month}
          cors: true

  DeleteWorkCalendar:
    handler: src/http/lambda/calendar/deleteWorkCalendar.handler
    events:
      - http:
          method: delete
          path: /calendar/{year}/{month}
          cors: true

  GetUsers:
    handler: src/http/lambda/users/getUsers.handler
    events:
      - http:
          method: post
          path: /users
          cors: true

  GetUser:
    handler: src/http/lambda/users/getUser.handler
    events:
      - http:
          method: post
          path: /users/{userId}
          cors: true

  CreateUser:
    handler: src/http/lambda/users/createUser.handler
    events:
      - http:
          method: post
          path: /users
          cors: true

  EditUser:
    handler: src/http/lambda/users/editUser.handler
    events:
      - http:
          method: patch
          path: /users/{userId}
          cors: true

  DeleteUser:
    handler: src/http/lambda/users/deleteUser.handler
    events:
      - http:
          method: delete
          path: /users/{userId}
          cors: true


resources:
  # API Gateway
  - ${file(resources/api-gateway.yml)}
  # Cognito
  - ${file(resources/cognito.yml)}
  # DynamoDB
  - ${file(resources/dynamodb.yml)}
