service:
  name: grifor-serverless-app
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    SCHEDULE_TABLE: WorkScheduleTable-${self:provider.stage}
  cognito:
    USER_POOL_ID: ${self:provider.region}_kwBneZOcU

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk

  serverless-offline:
    httpPort: 4000

  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true

functions:
  GetWorkSchedule:
    handler: src/http/lambda/schedule/getWorkSchedule.handler
    events:
      - http:
          method: get
          path: /schedule/{year}/{month}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SCHEDULE_TABLE}

  CreateWorkSchedule:
    handler: src/http/lambda/schedule/createWorkSchedule.handler
    events:
      - http:
          method: post
          path: /schedule
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SCHEDULE_TABLE}

  UpdateWorkSchedule:
    handler: src/http/lambda/schedule/updateWorkSchedule.handler
    events:
      - http:
          method: patch
          path: /schedule/{year}/{month}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SCHEDULE_TABLE}

  DeleteWorkSchedule:
    handler: src/http/lambda/schedule/deleteWorkSchedule.handler
    events:
      - http:
          method: delete
          path: /schedule/{year}/{month}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SCHEDULE_TABLE}

  GetUsers:
    handler: src/http/lambda/users/getUsers.handler
    events:
      - http:
          method: get
          path: /users
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:ListUsers
        Resource: arn:aws:cognito-idp:${self:provider.region}:*:userpool/${self:provider.cognito.USER_POOL_ID}

  GetUser:
    handler: src/http/lambda/users/getUser.handler
    events:
      - http:
          method: get
          path: /users/{userId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:AdminGetUser
        Resource: arn:aws:cognito-idp:${self:provider.region}:*:userpool/${self:provider.cognito.USER_POOL_ID}

  CreateUser:
    handler: src/http/lambda/users/createUser.handler
    events:
      - http:
          method: post
          path: /users
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:AdminCreateUser
        Resource: arn:aws:cognito-idp:${self:provider.region}:*:userpool/${self:provider.cognito.USER_POOL_ID}

  EditUser:
    handler: src/http/lambda/users/editUser.handler
    events:
      - http:
          method: patch
          path: /users/{userId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:UpdateUser
        Resource: arn:aws:cognito-idp:${self:provider.region}:*:userpool/${self:provider.cognito.USER_POOL_ID}

  DeleteUser:
    handler: src/http/lambda/users/deleteUser.handler
    events:
      - http:
          method: delete
          path: /users/{userId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:AdminDeleteUser
        Resource: arn:aws:cognito-idp:${self:provider.region}:*:userpool/${self:provider.cognito.USER_POOL_ID}

resources:
  # API Gateway
  - ${file(resources/api-gateway.yml)}
  # Cognito
  - ${file(resources/cognito.yml)}
  # DynamoDB
  - ${file(resources/dynamodb.yml)}
